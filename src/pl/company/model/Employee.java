package pl.company.model;

import java.time.LocalDate;
import java.util.Objects;

public class Employee extends Object {

    public static final int MIN_SALARY = 1000;
    // fields:
    private final String firstName;
    private final String familyName;
    private final String pesel;
    private final LocalDate birthday;

    private String jobTitle;
    private float salary = MIN_SALARY;


    // constructors:
    public Employee(String firstName, String familyName, String pesel, LocalDate birthday) {
        this.firstName = firstName;
        this.familyName = familyName;
        this.pesel = pesel;
        this.birthday = birthday; // LocalDate.of(2009, 2, 1); // ??!
    }


    // better is to return boolean or float instead of printline
    public void setSalary(float amount) {
        if (amount >= MIN_SALARY) {
            salary = amount;
        } else {
            System.out.println("Salary not altered: " + salary);
        }
    }

    public String getFirstName() {
        return firstName;
    }

    public String getFamilyName() {
        return familyName;
    }

    public String getPesel() {
        return pesel;
    }

    public LocalDate getBirthday() {
        return birthday;
    }

    public float getSalary() { return salary; }

    public String getJobTitle() {
        return jobTitle;
    }


    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public String getFullName() {
        return firstName + " " + familyName;
    }

    /*
    @Override
    public String toString() {
        return "firstName=" + firstName + ", lastName=" + familyName + ", salary=" + salary;
    }
    */

    // generated by IDE - alt+ins -> toString()
    @Override
    public String toString() {
        return "Employee{" +
                "firstName='" + firstName + '\'' +
                ", familyName='" + familyName + '\'' +
                ", pesel='" + pesel + '\'' +
                ", birthday=" + birthday +
                ", jobTitle='" + jobTitle + '\'' +
                ", salary=" + salary +
                '}';
    }

//    @Override // nadpisujemy equals, żeby dostosować metodę porównania do potrzeb
//    public boolean equals(Object obj) {
//        if (this == obj) { // sprawdza czy to ten sam obiekt
//            return true;
//        }
//        if (obj instanceof Employee) {
//            Employee emp = (Employee) obj; // rzutujemy obiekt na typ employee, z obj nie mamy dostepu do metod
//            if (firstName == null || !firstName.equals(emp.firstName)) {
//                return false;
//            }
//            if (familyName == null || !familyName.equals(emp.familyName)){
//                return false;
//            }
//            if (birthday == null || !birthday.equals(emp.birthday)) {
//                return false;
//            }
//            return true;
//        }
//        return false;

    // generate equals
    // pyt rekrutacyjne: relacja equals i hashcode - powiązane, equal object musi generowac ten sam hashcode, ten sam hashcode nie oznacza automatycznie equals!
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Employee employee = (Employee) o;
        return Float.compare(employee.salary, salary) == 0 &&
                Objects.equals(firstName, employee.firstName) &&
                Objects.equals(familyName, employee.familyName) &&
                Objects.equals(pesel, employee.pesel) &&
                Objects.equals(birthday, employee.birthday) &&
                Objects.equals(jobTitle, employee.jobTitle);
    }

    @Override
    public int hashCode() {
        return Objects.hash(firstName, familyName, pesel, birthday, jobTitle, salary);
    }
}
